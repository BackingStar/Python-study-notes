数据库启动  net start mysql
           net  stop mysql

数据库登录  mysql -h localhost -u root -p

#查看数据库  SHOW DATABASES;
#选择一个数据库   USE 数据库名;
#创建一个数据库  CREAT DATABASE [IF NOT EXISTS] database_name;
#查看创建数据库的SQL语言 SHOW CREAT DATABASE database_name;
#查看表  SHOW TABLES;
#创建表  CREAT TABLE table_name
	(
	 id INT(11) NOT NULL ,
	 name VARCHAR(20)
         );
#查看表结构  DESC table_name;
#查看创建表语句  SHOW CREAT TABLE table_name;
#查看表  SHOW COLUMNS FROM tble_name;
#插入数据  INSERT INTO table_name((id,name) value(1001,'zhangsan'));
查询数据   SELECT * FROM table_name;
删除数据   DELET FROM table_name WHERE id=1001;
删除表     DROP TABLE table_name;
删除数据库  DROP DATABASE database_name;
查看服务器状态   SHOW STATUS;
查看用户权限	SHOW GRANTS;
查看错误信息	SHOW ERRORS;
查看警告信息	 SHOW WARNINGS;
修改数据库保护模式   SET SQL_SAFE_UPDATES=0;


``反引号是为了区分保留字 与普通字符引入的符号，对于表最好都加上反引号

1...数据表

 CREAT TABLE table_name
	(
	 id INT(11) NOT NULL ，
	 name VARCHAR(20)，
 	 deptld INT(11),
	 salary FLOAT
         );

主键约束

主键不能为空，且数据唯一，能够唯一的标识表中的一条记录 

(1) 单字段主键
  id INT(11) PRIMARY KEY,
  或者 写在最后面
   PRIMARY KEY(id)

(2) 多字段联合主键
   PRIMARY KEY(id,name)

（3）使用外键约束
 外键是用来在两个表的数据之间建立连接，他可以是一列或者多列，一个表可以有一个或多个外键
定义外键后，不允许删除另一个表中有关联关系的行

主表：主键所在的那个表
从键： 外键所在的那个表 

 CREAT TABLE table_name2
	(
	 id INT(11) PRIMARY KEY ，
	 name VARCHAR(20)，
 	 deptld INT(11),
	 salary FLOAT
 	 CONSTRAINT fk_name FOREIGN KEY(deptld) REFERENCES table_name(id)
         );
子表的外键必须关联父类的主键，且关联字段的数据类型必须匹配，如果不匹配，则会出现错误

如果在定义外键的时候加上： ON DELETE CASCADE  那么在删除父表的类型的时候会同时删除子表所匹配的行
CONSTRAINT fk_name FOREIGN KEY (deptId) REFERENCES table_name(id) ON DELETE CASCADE

还有其他的 SET NULL ; NO ACTION ;  RESTRICT 拒绝父表的删除或更新操作

（4）使用非空约束
  
 name VARCHAR(25) NOT NULL,
指定的字段不能为空

（5）使用唯一性约束
可以确保一列或者几列不出现重复值，允许为空，但只能出现一个空值
 name VARCHAR(25) UNIQUE,
或者 写在最后面
  CONSTRAINT STH UINQUE(name)

UNIQUE 和PRIMARY KEY的区别是： 一个表中可以有多个UINQUE

（6）使用默认约束
指定某列的默认值

deptld INT(11) DEFAULT 1111,

(7) 设置表的属性值自动增加

一个表中只能有一个字段使用AUTO_INCREMENT约束，且该字段必须为主键的一部分

 id INT(11) PRIMARY KEY AUTO_INCREMENT,

自动增加属性值，默认初始值为1

------------------------------------------
2..查看数据表
 DESCRIBE/DESC  table_name;
 SHOW CREAT TABLE table_name\G

加上/G之后可以使显示结果更加直观

-----------------------------------------------
3..修改数据表

CREAT TABLE table_name
	(
	 id INT(11) NOT NULL ，
	 name VARCHAR(20)，
 	 deptld INT(11),
	 salary FLOAT
         );
（1）修改表名

 ALTER TABLE table_name RENAME[TO] table_name2;
 TO为可选参数，使用与否不影响结果

 （2） 修改字段的数据类型
  ALTER TABLE table_name MODIFY name VARCHAR(30);

(3) 修改字段名
 ALTER TABLE table_name CHANGE name name2 VARCHAR(20);
              表名            旧字段名 新字段名  新数据类型

如果不需要修改字段的数据类型，可以将新数据类型设置为原来的一样即可，但不能为空 

（4） 添加字段 (默认最后)
添加没有约束的字段
ALTER TABLE table_name ADD managerId INT(10);

添加有约束的字段
ALTER TABLE table_name ADD column1 VARCHAR(12) NOT NULL;

在表的第一列添加字段
ALTER TABLE table_name ADD column2 INT(11) FIRST;

在指定的位置添加字段
ALTER TABLE table_name ADD column3 INT(13) AFTER name;

添加外键、主键：
ALTER TABLE table_name ADD  PROMARY KEY(id) ;
ALTER TABLE table_name ADD CONSTRAINT fk_name FOREIGN KEY(column1)REFERENCES table_name2(id);

(5) 删除字段
 ALTER TABLE table_name DROP column2;

添加、删除默认约束
 ALTER TABLE table_name ALTER age DEFAULT 15;
 ALTET TABLE table_name ALTER age DROP DEFAULT;

(6) 修改字段排列位置

修改字段为表的第一个字段
ALTER TABLE table_name MODIFY column1 VARCHAR(12) FIRST;

修改字段到表的指定列之后
ALTER TABLE table_name MODIFY column1 VARCHAR(12) AFTER name;

（7）更改表的存储引擎
ALTER TABLE table_name ENGINE=MyISAM

(8) 删除表的外键约束
ALTER TABLE table_name DROP FOREIGN KEY fk_name;  #外键名

 删除索引
ALTER TABLE table_name DROP INDEX uername;

-----------------------------------------
4..删除数据表

(1)删除没有被关联的数据表 
DROP TABLE [IF EXISTS] 表1，表2，表3... ;

可以一次性删除多个表

(2) 删除被其他表关联的主表
 如果直接删除则会出现错误，如果要保留子表，删除父表，可以先删除关联外键，在删除父表

ALTER TABLE table_name DROP FOREIGN KEY fk_name;
DROP TABLE table_name;

****************************************************
-------------------我是分界线------------------------------
***************************************************
1.数据类型：
（1）整数类形： TINYINT  SMALLINT MEDIUMINT INT(INTEGER) BIGINT
            1          2         3      4             8    个字节

INT(11)
 显示宽度为11 位，显示宽度并不能限制取值范围和占用空间，比如：INT(3)会占用4个字节的存储空间，并且允许的最大值也不会是999看，而是INT整形所允许的最大值

（2）浮点数类型： FLOAT  DOUBLE   DECIMAL(M,D)
 M为精度，表示位数，N为标度，表示小数位数

不论是定点还是浮点类型，如果用户指定的精度超出精度范围，则会四舍五入进行处理

（3）日期和时间类型
YEAR   YYYY			1
TIME   HH:MM:SS			3
DATE   YYYY-MM-DD		3  字节
DATETIME   YYYY-MM-DD HH:MM:SS   8
TIMESTAMP   YYYY-MM-DD HH:MM:SS  4

DELETE FROM table_name；#清空表中数据
INSERT INTO table_name values(CURRENT_TIME),(NOW());#获取当前时间

（4）字符串类型
CHAR(M)      适用于MyISAM
VARCHAR(M)     使用于InnoDB
TEXT
ENUM         字段名 ENUM('值1','值2','值3'...);
SET		字段名 SET('值1','值2','值3'...);

ENUM SET区别： ENUM只能取单值，而SET可以从中取多个值，并且会排序

（5）二进制类型
BIT(M)
BINARY(M)
BLOB(M)

BLOB是二进制字符串，TEXT是非二进制字符串，两者都可存放大容量数据。BLOB主要存储图片、音频信息等，TEXT只能存储纯文本文件

------------------------------------------------
2..运算符：
LEAST 		返回最小值
GREATEST	返回最大值
BETWEEN AND	是否落于两种之间
IN		判断一个值是IN列表中的一个
NOT IN		判断一个值不是IN列表中的一个
LIKE		通配符匹配   用来匹配字符串
REGEXP		正则表达式匹配

LIKE
"%"匹配任意数目的字符，甚至包括零字符
"_" 只能匹配一个字符

SELECT 'stud' LIKE 'stud'  匹配字符串，返回1
SELECT'stud' LIKE 'stu_'  匹配stu开头的四个字符串  返回1
SELECT'stud' LIKE '%d'     匹配以字母d结尾的字符串   返回1
SELECT'stud' LIKE 't_ _ _'  匹配以t 开头的长度为4的字符串   返回0
SELECT'stud' LIKE 'null'

REGEXP

  ^  匹配以该字符后面的字符开头的字符串
 $  匹配以该字符后面的字符结尾的字符串
 .  匹配任何一个单字符
[..] 匹配在方括号里面的任何字符
*   零个或多个前面的字符


转义字符 “\”
区分大小写的字符串比较
BINARY 'a'='A'   返回 0


--------------------------------------------
3...MYSQL函数

(1） 数学函数： 有错误发生时，返回NULL
 绝对值  ABS(X)
 圆周率  P()
 平方根 SQRT(X)
 求余函数 MOD(X,Y)
获取整数 CEIL(X)  CEILING(X) 返回不小于x的最小整数
         FLOOR(X)  返回不大于x的最大整数
随机数： RAND()  RAND(X)  不指定X就产生0-1之间的随机浮点数，指定后，就会以X作为种子值，产生重复序列

四舍五入： ROUND(X)  ROUND(X,Y) TRUNCATE(X,Y)
                      保留Y位        舍至小数点后面Y位
符号函数：SIGN(X)  -1  0 1
幂运算函数： POW(X,Y)  POWER(X,Y)
            EXP(X)  e的x次方
对数运算函数： LOG(X) 底数为e的自然对数  LOG10(X) 底数为10的对数
角度与弧度相互转换的函数: RADIANS(X) 将x由角度转为弧度
                        DEGREES(X)  将x由弧度转为角度
正弦函数: SIN(X)  反正弦函数： ASIN(X)
余弦函数：COS（X）反余弦函数 ： ACOS(X)
正切函数：TAN(X)  ATAN(X)  COT(X)

（2）字符串函数
字符串长度函数：
   CHAR_LENGTH(str)  返回字符串个数
   LENGTH(str)   返回字符串长度
合并函数：
    CONCAT(s1,s2) 合并字符串函数
    CONCAT_WS(x,s1,s2,..)  合并字符串之间用x 隔开
替换函数：
     INSERT(s1,x,len,s2)  替换为从x开始长度为len 的s2
大小写转换函数：
     LOWER(str) 或 LCASE() 大写转为小写
     UPPER(str) 或 UCASE()   小写转为大写
获取指定长度函数：
     LEFT(S,N)   返回字符串S最左边的N个字符
     RIGHT(S,N） 返回字符串S最右边的N个字符
填充字符串函数；
   LPAD(s1,len,s2)  返回字符串s1，最左边由s2填充到len长
   RPAD(s1,len,s2)  返回字符串s1，最右边由s2填充到len长
删除空格函数：
   LTRIM(S): 删除字符串S左边空格
   RIRIM(S): 删除字符串S右边空格
   TRIM(S):  删除字符串S两侧空格
   TRIN(S1 FROM S)  删除字符串S两侧的S1
重复生成函数； 
    REPEAT(S,N)  重复S N次
空格函数
    SPACE(N) 返回 N个空格
替换函数
    RRPLACE(S,S1,S2) 使用S2替换S中的所有S1
比较字符串大小的函数：
    STRCMP(S1,S2) 若相同返回0，S1<S2 返回-1，S1>S2 返回1
获取子串的函数：
    SUBSTRING(S,N,len) 返回s中从N开始的长为len的字符串
    MID(S,N,len) 同上
匹配字符串开始位置的函数
 LCCATE(strl,str)
 POSITON(strl IN str)  返回字符串strl在str中的开始位置
 INSTR(str,strl)    
反转函数
 REVERSE(S)   将S反转
返回指定位置的字符串函数：
  ELT(N,str1,str2,str3...)  返回第N个字符串
返回指定字符串位置的函数：
  FIELD(S,S1,S2,...)    返回字符串S的第一次位置
返回子串位置的函数
  FIND_IN_SET(S1,S2)  返回s1在S2中的位置

 (3)日期函数
当前时间和日期
  NOW()
当前日期
  CURDATE()
当前时间
  CURTIME()
日期变化
   DATE_ADD()   
   SELECT DATE_ADD('2014-5-20' INTERVAL 3 WEEK);
日期差值
   DATEDIFF()      
   SELECT DATEDIFF('2014-5-20','2017-2-12');
日期格式值
  DATE_FORMAT()
   SELECT DATE_FORMAT('2014-2-20','%M/%D/%Y');
    
其他的很少用到，因为在开发中，日期都很少用到，所以...

（4） 信息函数
 连接ID
 SELECT CONNECTION_ID()
当前数据库
  SELCET DATABASE()
最后插入记录的ID号 : 	如果一次插入多条记录，只会返回第一条记录
 LAST_INSERT_ID()
当前用户+
  SELECT USER()
版本信息
  SELECT VERSION()
（5） 聚合函数
平均值
SELECT AVG(prince);
SELECT id,AVG(price) AS avgprice FROM table_name GROUP BY id;
计数
 SELECT COUNT(prince);
COUNT(*) 计算表中总的列数，不管列中有数值或者为空值
COUNT( 字段名） 计算指定列下总的行数，计算时忽略空值的行
SELECT num ,COUNT(id) FROM table_name GROUP BY num;
最大值
  SELECT MAX(prince);
SELECT id,MAX(price) AS maxprice FROM table_name GROUP BY id;
SELECT MAX(price)  FROM table_name;
最小值
   SELECT MIN(price);
求和
   SELECT SUM(prince);
SELECT id,SUM(num) AS total FROM table_name GROUP BY id;

(6) 加密函数
SELECT MD5(str); # 建议使用
SELECT PASSWORD(str);#最好用在设置客户端登录密码

更改登录密码： SET PASSWORD=PASSWORD('dimitar);
(7)条件判断语句
 IF(EXPR,V1,V2)  判断expr是TRUE返回V1，否则返回V2
 
 CASE 函数：
  CASE expr WHEN v1 THEN r1[WHEN v2 THEN r2][ELSE r3] END;
 当expr为v1的，则执行r1 。。


----------------------------------
***** 1. 插入************
----------------------------

INSERT [INTO] table_name [(columns)] VALUES(value_list),();
其中可以使用NULL 或者DEFAULT,在写值的时候还可以嵌套表达式或者其他语句


INSERT [INTO]  table_name SET col_name={expr|DEFAULT]},...

此方法与第一种的区别在于，此方法可以使用 子查询（SubQuery）

INSERT [INTO] table_name [(col_name,..)] SELECT..
此方法可以将查询结果插入到指定数据表

----------
   2. 更新
------------
UPDATE table_regerfence SET col_name1={expr1|DEFAULT}[,col_name2={expr2|DEFAULT}]... [WHRER where_condition]

UPDATE table_name SET userid=userid+10;
UPDATE table_name SET userid=userid+10 WHERE userid%2=0,sex=0;

-------------
3.删除
------------
单表删除
 DELETE FROM table_name WHERE wher_condition;

---
**********************/////////////////
            查询数据
**********+++///////////////////////
 星号 * 通配符查询所有字段

基本.查询语句
SELECT select_expr[,select_expr..] 
   FROM table_references  
  [ WHERE [where_condition ]
  [GROUP BY{col_name|position} [ASC|DESC],...]
  [HAVING where_condition]
  [ORDER BY{col_name|expr|position}[ASC|DESC],..]
  [LIMIT{[offset,]row_count|row_count OFFSET offset}]
]
查询表达式； 
   每一个表达式表示想要的一列，必须有至少一个。
   多少列之间用英文逗号隔开。
   星号（*）表示所有列，table_name.*可以表示命名表的所有列
  查询表达式可以使用[AS] alias_name为其赋予别名
  别名可用于GROUP BY ,ORDER BY或 HAVING 字句

 SELECT id,username FROM table_name ;
 SELECT id AS idId,username AS userName FROM table_name;

 条件表达式：
 对记录进行过滤，如果没有指定WHERE 语句，则显示所有记录
在 WHERE表达式中，可以使用MYSQL支持的函数或者运算符

对查询的结构进行分组；
GROUP BY{col_name|position}[ASC|DESC],...]
SELECT sex FROM table_name GROUP BY sex;

分组条件：
 HAVING where _condition  
   其中，这个条件必须是聚合函数或者出现在SELECT中
 SELECT sex FROM table_name GROUP BY 1 HAVING count(id)>=2;

对查询结果进行排序：
 ORDER BY {col_name,col_name2...}[ASC|DESC] 升序 降序
SELECT * FROM table_name  ORDER BY id,age DESC;

 限制查询结果返回数量：
LIMIT{[offset,]row_count|row_count OFFSET offset}]
 SELECT *FROM table_name LIMIT 2,2; #第2+1位开始，两个数据。限制指定行 从0开始--n
 还可以将SELECT语句插入到 INSERT 中
 INSERT table_name(userage) SELECT *FROM users WHERE age >=30;


(1)带IN 关键字的查询
SELECT id,name FROM table_name WHERE id NOT IN(100,101) ORDER BY name ASC;

SELECT id,name FROM table_name WHERE id IN(101,102) ORDER BY name;

(2)带BETWEEN AND 的范围查询
SELECT name,price FROM table_name WHERE price BETWEEN 29 AND 39;
SELECT name,price FROM table_name WHERE price NOT BETWEEN 29 AND 39;

(3)带LIKE的通配符查询
  百分号' %' 匹配任意长度的字符，甚至包括零字符
 查找以字符b 开头的name
 SELECT id,name FROM table_name WHERE name LIKE 'b%';
  查找包含有 b 的name
 SELECT id,name FROM table_name WHERE name LIKE '%b%';
 查找以字符 b 开头，y 结尾的name
 SELECT id,name FROM table_name WHERE name LIKE 'b%y';
  
   下划线 '_'  一次只能匹配任意的一个字符
  查找以字符b 前面只有4个字符的name
 SELECT id,name FROM table_name WHERE name LIKE '____b';

(4) 查询空值
 SELECT id,name FROM table_name WHERE id IS NULL;
 SELECT id,name FROM table_name WHERE id IS NOT NULL;

(5) 带AND 的多条件查询
  SELECT id,name FROM table_name WHERE price>=5 AND id='101';
  SELECT id,name FROM table_name WHERE id IN('101','102') AND price>=39 AND name='apple';

 (6) 带OR 的多条件查询
  SELECT id,name FROM table_name WHERE id=10 OR id=19;
  SELECT id,name FROM table_name WHERE id IN(10,19);
 
这两句话是一样的，但是使用IN使得检索语句更为简洁并且IN执行的速度要快于OR，更重要的是使用IN操作符，可以执行更加复杂的嵌套查询

OR和AND 可以一起使用，但是在使用的要注意，AND 的优先级要高于OR 的优先级，因此先对AND 两边的操作数进行操作，再与OR中的操作数进行结合。

 （7） 查询结果不重复
  SELECT DISTINCT id FROM table_name;
 返回的id 不会有重复的

--------------------------------------- **********
 对查询结果排序：
 （1）单列排序
 SELECT name FROM table_name ORDER BY name;
 (2) 多列排序
 当第一列相同时，根据第二列进行排序，。。
SELECT name ,price FROM table_name ORDER BY name,price;
 在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序，如果第一列数据中的所有值都是唯一的，将不会对第二列进行排序
（3）指定排序方向
  SELECT name FROM table_name ORDER BY price DESC,name;
DESC 排序方式只应用到直接位于其前面的字段上，如果要对多列都进行降序排序，那么要在每一列的后面都加上DESC

-----------------------------
分组排序

(1) GROUP BY
SELECT id,COUNT(*)AS Total FROM table_name GROUP BY id;
SELECT id,GROUP_COUNT(name) AS names FROM table_name GROUP BY id;

(2) HAVING
SELECT id,GROUP_COUNT(name) AS names FROM table_name GROUP BY id HAVING COUNT(name)>1;
显示 name 个数大于1的进行id 分组；

HAVING 与WHERE ；都是进行数据过滤的，最重要的一点就是： HAVING 是在数据分组过后进行过滤来选择分组，而 WHERE 是在分组之前用来选择记录，另外，WHERE排除在外的记录就不会包括在分组中。

(3） WITH ROLLUP
使用WITH ROLLUP 关键字，在所有的查询出的分组记录之后增加一条记录，用来计算所有记录的总和，统计记录数值

SELECT id ,COUNT(*)AS Total FROM table_name GROUP BY id WITH ROLLUP;

(4) 多字段分组
 SELECT * FROM table_name GROUP BY id,name;

(5) GROUP BY 和ORDER BY 一起使用
SELECT id,SUM(num*price) AS Total FROM table_name GROUP BY id HAVING SUM(num*price)>100 ORDER BY Total;

查询总价大于100的和总的订单价格，并进行排序

ROLLUP 与ORDER BY 是不能同时使用的，互斥的

(6)
   使用LIMIT限制查询结果的数量
 SELECT *FROM table_name LIMIT 4;
 返回前四行，与LIMIT 0，4 等价
 SELECT * FROM table_name LIMIT 3,4;
 返回从第 3+1 行开始的4行数据


-----------------------------------------------
*********连接查询*****

内连接查询：
INNER JOIN [ON]
SELECT suppliers.s_id,s_name,f_name,f_price FROM fruits INNER JOIN suppliers ON fruits_id=suppliers_id;

等价于：
SELECT supplier.s_id,s_name,f_name,f_price FROM fruits, suppliers WHERE fruits_id=suppliers_id;

自连接是一种特殊的内连接，是指相互连接的表在物理上是为同一张表，但可以在逻辑上分为两张表
SELECT f1.f_id,f1.f_name FROM fruits AS f1,fruits AS f2 WHERE f1.s_id=f2.s_id AND f2.f_id='a1';

外连接查询
LEFT  OUTER JOIN     左连接
RIGHT OUTER JOIN    右连接

LEFT OUTER 字句中指定的左表的所有行，如果左表的某行在右表中没有匹配，则在相关联的结果行中，右表的选择列表为空值
SELECT customers.id,order.num FROM customer LEFT OUTER JOIN order ON customer.id=order.id;

RIGHT OUTER 右连接是左连接的反向连接，将返回右表中的所有行，如果右表中的某行在左表中没有匹配行，左表将返回空值
SELECT customer.id,order.num FROM customer RIGHT OUTER JOIN order ON customer.id=order.id;

复合条件连接查询
 SELECT customer.id,order.id FROM customer INNER JOIN order ON customer.id=order.id AND customer.id=10001;

内连接并排序
SELECT suppliers.s_id,s_name,f_name,f_price FROM fruits INNER JOIN suppliers ON fruits.s_id=suppliers_id ORDER BY fruits.s_id;


----------------------------------------------------
**********子查询  即为嵌套查询

(1)带 ANY 或 SOME 关键字的子查询
  满足一个就行
 SELECT num1 FROM tab1 WHERE num1> ANY(SELECT num2 FROM tab2);

(2)带ALL关键字的子查询
   满足所有
 SELECT num1 FROM tab1 WHERE num1> ALL(SELECT num2 FROM tab2);

（3）带EXISTS 关键字的子查询
   是否返回行，是就为TRUE 不是就为FALSE 
 SELECT * FROM fruits WHERE EXTSTS (SELECT name FROM supplies WHERE id=107);
  EXISTS 和条件表达式一起用
 SELECT * FROM fruits WHERE priceL>12 AND EXISTS (SELECT name FROM supplies WHERE id=107);
   NOT EXISTS
 SELECT * FROM fruits WHERE priceL>12 AND NOT EXISTS (SELECT name FROM supplies WHERE id=107);

（3） 带IN 关键字的子查询
  用IN 进行查询的时候，内层查询语句仅仅返回一个数据列，这个数据列里的值将提供给外层查询语句进行比较操作
 SELECT id FROM orders WHERE num IN(SELECT num FROM orderitiems WHERE id='c0');
  NOT IN 相反

 （4） 带比较运算符的子查询
   > < <= >= = <>即为!=
 SELECT id,name FROM fruits WHERE id=(SELECT s1.id FROM supplies AS s1 WHERE s1.city='TianJin');
 

---------------------------------------------
 合并查询结果
----
  UNION    UNION ALL
使用UNION 可以给出多条SELECT 语句，并将他们的结果组合成单个结果集，合并时，两个表对应的列数和数据类型必须相同
 UNION ALL 的作用是不删除重复行 也不对结果进行自动排序
 UNION 会删除重复行，所有返回的行都是唯一的
 格式：
 SELECT colum... FROM table1
  UNION [ALL]
 SELECT colum... FROM table2

SELECT id,name FROM friuts WHERE price<10 UNION ALL SELECT id,name FROM fruits WHERE id IN(101,103);

----------------------------------
为表和字段取别名

 表名 AS 表别名
 字段 AS 字段名

------------
使用正则表达式 查询

^ 匹配文本的开始字符  '^b' 匹配以字母b开头的字符串
SELECT * FROM table_name WHERE name REGEXP '^b';

$ 匹配文本的结束字符  'st$' 匹配以st结尾的字符串
SELECT * FROM table_name WHERE name REGEXP 'st$';

'.' 匹配任意单个字符
SELECT *FROM table_name WHERE name REGEXP 'a.g';

'*' 匹配前面的字符0次或者多次，即为任意多次，包括0次
'+' 匹配前的的字符1次或者多次，即为至少一次
SELECT * FROM table_name WHERE name REGEXP '^ab*'  #以a开头，b可有可无

SELECT * FROM table_name WHERE name REGEXP '^ab+'  #以a开头，b至少一次

<字符串> 匹配任意位置的指定字符串
SELECT *FROM table_name WHERE name REGEXP 'on'; #出现on字符串
SELECT *FROM table_name WHERE name REGEXP 'on|ap';#出现on 或者ap的字符串
LIKE 'on' 与 REGEXP 'on' 的区别：
 LIKE 匹配的字符串如果在文本中间出现，则找不到他 ,如 lemon
 而REGEXP 'on' 在文本的哪里都可以找得到， 如 tong

[字符集合] 匹配字符集合里面的任何一个字符 '[ac]' 匹配a或者c 任意一个
SELECT * FROM table_name WHERE  name REGEXP '[ot]';
SELECT *FROM table_name WHERE id REGEXP '[273]';

匹配集合还可以写成 [1-9] [a-z] 这种指定的区间
 
[^字符集合] 匹配不在字符集合中的字符
SELECT *FROM table_name WHERE id REGEXP '[^a-e1-5]'; #匹配a-e和1-5以外的字符

{n },{n,m}  匹配前面字符串出现的次数
{n }    匹配前面字符串出现的次数 至少n 次
{n,m}  匹配前面字符串出现的次数为 n-m次
SELECT * FROM table_name WHERE name REGEXP 'ab{3,5}'; #匹配ab 出现至少3次，不超过5次



----------------------------------------------
*********  索引 *************************
-------------------------------------------------
索引是数据库表中的一列或多列的值进行排序的一种结构，使用索引可以提高数据库中特定数据的查询速度

 所有存储引擎支持每个表至少16个索引，总索引长度至少为256字节
MYSQL 中索引的存储类型有两种，BTREE和HASH ，具体和表的存储引擎有关
   MyISAM和InnoDB 存储引擎只支持 BTREE索引
   MEMORY/HEAP存储引擎可以支持HASH 和BTREE 索引

索引优点： 
 （1）通过创建唯一索引，可以保证数据表中每一行数据的唯一性
 （2）大大加快数据的查询速度 （主要原因）
  （3）实现数据的参考完整性方面，加快表与表之间的连接
 （4）使用分组和排序子句进行数据查询时，可以显著减少查询中分组和排序的时间 
 缺点：
    (1) 创建索引和维护索引需要耗费时间
  （2） 需要占用磁盘空间，资源
  （3） 对表中进行增删改时，索引也需要进行动态的维护降低了数据的维护速度

索引设计原则：
 （1） 索引并非越多越好，表中有大量索引，不仅占用磁盘空间，还会影响 INSERT,DELETE,UPDATE 语句的性能，因为数据更改时，索引也会进行调整和更新。
 （2） 避免对经常更新的表进行过多的索引，并且索引中的列尽可能的少，而对于经常查询的字段应该创建索引
 （3） 数据量少的表最好不使用索引
  （4） 在条件表达式中经常使用到的不同值较多列使用索引，在不同值少的列不要使用索引，如性别，只有‘男’和‘女’，否则降低更新速度
  （5） 当唯一性是某种数据本身的特征，指定唯一索引，这样能确保定义的列的数据完整性，以提高查询速度
  （6） 在频繁进行排序或者分组（即 group by或者 order by）的列上建立索引，如果待排序的列有多个，可以在这些列上建立组合索引

---------------------------
    一、在创建表的时候创建索引
----------------------------
CREATE TABLE table_name [col_name date_type]
 [UNION|FULLTEXT|SPATIAL] [INDEX|KEY][index_name](col_name[length]) [ASC|DESC]
 唯一|全文|空间索引 索引 索引名字 需要索引字段 长度 升序|倒序

索引分类：
1. 普通索引：允许重复值和空值
 CREATE TABLE table_name(
     id INT NOT NULL,
     info  VARCHAR(255) NOT NULL,
     year_publication  YEAR NOT NULL,
     INDEX normal(year_publication)
);

使用EXPLAIN 语句查询索引是否正在使用
  EXPLAIN SELECT * FROM table_name WHERE year_publication=1990\G

2.唯一索引 ：关键字：UNIQUE 
  索引列的值必须唯一，允许有空值。如果是组合索引，则列值的组合必须唯一。主键索引是一种特殊的唯一索引，不允许有空值
CREATE TABLE table_name(
     id INT NOT NULL,
     info  VARCHAR(255) NOT NULL,
     year_publication  YEAR NOT NULL,
     UNIQUE INDEX UniqIdx(id DESC)
);

3.单列索引 ： 在数据表中的某一个字段上创建的索引，一个表中可以创建多个单列索引 。
   前面两个都是单列索引

CREATE TABLE table_name(
     id INT NOT NULL,
     info  VARCHAR(255) NOT NULL,
     name  VARCHAR(50) ,
     year_publication  YEAR NOT NULL,
     INDEX SingleIdx(name(20))
);

4..组合索引：列值的组合比粗唯一。使用时遵循“最左前缀”，如(id,name,age) 索引时，是按照（id）、（id,name）、(id,name,age) 进行搜索的如果不能构成最左边的前缀，则不能使用局部索引，如（age)、（name,age）   

CREATE TABLE table_name(
     id INT NOT NULL,
     info  VARCHAR(255) NOT NULL,
     year_publication  YEAR NOT NULL,
     INDEX MultiIdx(id,name,age(100))
);

查询时： EXPLAIN SELECT * FROM table_name WHERE id=1 AND name='joe'\G
     可以查询到索引正在使用，
但是查询： EXPLAIN SELECT * FROM table_name WHERE name='joe'AND age=15 \G
      是查不到索引的


5..全文索引 :关键字：FULLTEXT
 允许重复值和空值。只有MyISAM存储引擎支持， 并且只为CHAR,VARCHAR,TEXT 列，即数据类型

CREATE TABLE table_name(
     id INT NOT NULL,
     info  VARCHAR(255) NOT NULL,
     year_publication  YEAR NOT NULL,
     FULLTEXT INDEX FullTxtIdx(info)
) ENGINE=MyISAM;

6..空间索引 ：关键字： SAPTIAL 
  只有MyISAM 存储引擎，并且是针对空间数据类型字段，不允许为空  
   MYSQL空间数据类型： GEOMETRY,POINT,LINESTRING,POLYGON

 CREATE TABLE table_name(
     id INT NOT NULL,
     info  VARCHAR(255) NOT NULL,
     year_publication  YEAR NOT NULL,
     g   GEOMETRY NOT NOT NULL,
     SPATIAL INDEX SpatIdx(g)
) ENGINE=MyISAM;


---------------------------
    二、在已经存在的表上创建索引
----------------------------

  使用ALTER TABLE 创建索引

ALTER TABLE table_name ADD [UNIQUE|FULLTEXT|SPATIAL] [INDEX|KEY]
[index_name](col_name[length])[ASC|DESC]

(1)、普通索引

ALTER TABLE table_name ADD INDEX BKNameIdx(bookname(30));

使用SHOW INDEX 查看表中的索引
 SHOW INDEX FROM table_name\G

(2) 唯一索引
ALTER TABLE table_name ADD UNIQUE INDEX UniqidIdx(bookId DESC);

(3) 单列索引
ALTER TABLE table_name ADD INDEX BkcmtIdx(comment(50));

(4) 组合索引
ALTER TABLE table_name  ADD INDEX BkAuAndInfoIdx(authors(20),info(50));

(5) 全文索引
 首先创建一个表
 CREATE TABLE ( 
     id INT NOT NULL,
     info CHAR（255），
     ) ENGINE=MyISAM;
ALTER TABLE table_name ADD FULLTEXT INDEX FullIdx(info);

(6) 空间索引

ALTER TABLE table_name ADD SPATIAL INDEX SpaIdx(g);

  
 使用CREATE INDEX 创建索引

 CREATE [UNIQUE| FULLTEXT|SPATIAL] INDEX index_name ON table_name(col_name[length])[ASC|DESC]

(1) 普通索引
 CREATE INDEX BkNameIdx ON table_name(bookname);
(2) 唯一索引
 CREATE UNIQUE INDEX UinqIdx ON table_name(bookId  DESC);
(3) 单列索引
 CREATE INDEX BkcmtIdx ON table_name(comment(50));
(4) 组合索引
 CREATE INDEX BkAuAndInfoIdx ON table_name(authors(20),info(50));
 (5) 全文索引
 CREATE FULLTEXT INDEX FullIdx ON table_name(info);
(6) 空间索引
  CREATE SPATIAL INDEX SpaIdx ON table_name(g);

---------------------------
    二、删除索引
----------------------------
 使用 ALTER TABLE 删除索引

 ALTER TABLE table_name DROP INDEX index_name;

注意： 添加AUTO_INCREMENT 约束字段的唯一索引不能被删除

 使用 DROP INDEX 删除索引
DROP INDEX index_name ON table_name;


--------------------------------------------
 *****************************************
-------------------------------------------
       存储过程与函数

--------------
存储过程；
  存储过程是SQL语句和空值语句的预编译集合，以一个名称存储并作为一个单元处理。

优点：（1） 增强SQL语句的功能和灵活性
     （2）实现较快的执行速度（因为这是预编译，第一次编译之后，之后再次调用时，MYSQL引擎就会直接调用结果，而不用再去编译，减少了SQL语句编译的时间）    
      （3）减少网络流量

 过程体： 由合法的SQL语句构成
          可以是任意SQL语句
        过程体如果为复合结构则使用BEGIN ...END 语句
        复合结构可以包含声明，循环，控制结构
 ROW_COUNT()函数： 是操作之后影响的列数（包括增加的、更新的。。。）

 一、创建存储过程：
   CREATE PROCEDURE sp_name([proc_parameter])
    [characteristics...] routine_body
 
 proc_parameter 为参数列表:
    [IN|OUT|INOUT] param_name type
   其中IN表示 输入，OUT表示输出，INOUT表示既可以输入又可以输出

 characteristics:指定存储过程的特性，有以下取值：
  （1）LANGUAGE SQL: 说明 routine_body 部分是由SQL 语句组成的
  （2）[NOT] DETERMINISTIC: 说明存储过程是否正确
  （3）{CONTAINS SQL|NO SQL|READS SQL DATA| MODIFIFIES SQL DATA}: 指明子程序使用SQL 语句的限制（包含SQL语句，但是不包含读写数据的语句；| 不包含SQL语句；|包含读数据的语句；| 包含写数据的语句）  默认是CONTAINS SQL
  （4） SQL SECURITY{DEFINER|INVOKER} :指明谁有权限来执行： DEFINER 表示只有定义者才能执行，INVOKER表示拥有权限的调用者可以执行，默认为DEFINER
   (5) COMMENT 'string': 注释信息，可以用来描述存储过程或函数

routine_body 是SQL代码的内容，使用BEGIN...END 来表示SQL语句的开始和结束

  使用DELIMITER//是将MYSQL语句的结束符设置为// ，避免与SQL语句结束符发生冲突。

案例： 
（1） 无参
   DELIMITER//
  CREATE PROCEDURE Proc()
   BEGIN 
   SELECT * FROM fruits;
   END
   //
   DELIMITER;
（2）有参
   DELIMITER//
   CREATE PROCEDURE CountProc(OUT param INT)
   BEGIN
   SELECT COUNT(*) INTO param FROM fruits;
   END
   //
   DELIMITER;

二、调用存储过程：使用 CALL sp_name([parameter[...])
   DELIMITER//
   CREATE PROCEDURE CountProc(IN sid INT,OUT num INT)
   BEGIN
      SELECT COUNT(*) INTO num FROM fruits WHERE id=sid;
   END//
   DILIMITER;
  CALL CoutProc(18,@num);
  SELECT @num;
     

存储过程的修改只能修改基本特性，并不能修改存储体，因此，如果存储体或者函数体出现错误，只能删掉重新写一个存储过程或者函数。


-----------------------------------------------
函数：有一个或者多个参数，但是只能有一个返回值

 函数体： 函数体有合法的SQL语句构成
   函数体可以是简单的SELECT 或INSERT 语句
   函数体如果为符合结构则使用  BEGIN... END 语句
   符合结构可以包含声明，循环，控制结构

一：创建存储函数

  CREATE FUNCTION func_name([func_parameter])
   RETURNS type
   [characteristics] routine_body

  func_parameter 中默认的参数是 IN,函数体中，强制指定返回类型，并且函数体必须包含一个RETURN value语句

例子：
  DELIMETER//
 CREATE FUNCRION name(call INT)
   RETURNS CHAR(50)
    BEGIN
   RETURN (SELECT s_name FROM suppliers WHERE s_call=call);
     END//
    DELIMETER;
 
二、调用存储函数；
    SELECT name(23354);


存储过程和函数的区别：
       存储构成实现的功能要复杂一些，而函数的针对性更强；函数限制比较多，不能用临时表，只能用表变量等等；
  	存储过程可以返回多个值，函数只能有一个返回值；
 	存储过程一般独立的来执行，为而函数可以作为其SQL语句的组成部分来的实现

-----------------------------------------
查看存储过程和函数
 1. SHOW STATUS  查看状态
 SHOW {PROCEDURE|FUNCTION} STATUS [LIKE 'pattern']

查看以字母C开头的存储过程信息
 SHOW PROCEDURE STATUS LIKE 'C%'\G

 2. SHOW CREATE  查看定义
   SHOW CREATE {PROCEDURE|FUNCTION} sp_name;

 3.从information_schema.Routines 表中查看存储过程和函数信息
  SELECT * FROM infomation_scheme.Routines
  WHERE ROUTINE_NAME='sp_name';

修改存储过程和函数

 ALTER {PROCEDURE|FUNCTION} sp_name[characteristic...]

例子；
  ALTER PROCEDURE CountProc
  MODIFIES SQL DATA
  SQL SECURITY INVOKER;

删除存储过程和函数
  DROP {PROCEDURE|FUNCTION} [IF EXISTS] sp_name;

-----------------------------------------
定义变量:
   局部变量： DECLARE
    在子程序中声明并使用，这些变量是作用在BEGIN...END 范围内
 DECLARE var_name[,var_name2]...date_type[DEFAULT value]
 如果没有DEFAULT 语句，则初始值为NULL
  DECLARE myparam INT DEFAULT 100;

为变量赋值：
  SET var_name=expr;
 
 DECLARE var1,var2,var3 INT;
 SET var1=10,var2=20;
 SET var3=var1+var2;

 为一个或多个变量赋值
 SELECT col_name[,...] INTO var_name[,...] table_expr;
 DECLARE fruitname CHAR(50);
 DECLARE fruitprice DECIMAL(8,2);
 SELECT f_name,f_price INTO fruitname,fruitprice
 FROM fruits WHERE f_id='a1';
 

但是 @var_name 表示用户变量，使用SET为其赋值，可以作为全局变量

-----------------------------------------------
定义条件和处理程序
 遇到错误时采取的处理方式，增强存储程序处理问题的能力，避免程序异常停止运行

 1、定义条件
 DECLARE condition_name CONDITION FOR[condition_type]
 
[condition_type];有两种：如 ERROR 1142(42000)
   SQLSTATE[VALUE] sqlstate_value   长度为5的错误代码 -42000
   mysql_error_code                 数值类型错误代码  1142
               
DECLARE command CONDITION FOR SQLSTATE '42000';
DECLARE command CONDITION FOR 1148;

2、定义处理程序
DECLARE handler_type HANDLER FOR condition_value[,..] sp_statement
  
handler_type: 有三种
   CONTINUE 遇到错误不处理，继续执行
   EXIT： 遇到错误马上退出
   UNDO:  遇到错误后撤回之前的操作，但是MYSQL不支持这样的操作

condition_value:表示错误类型 ，有六种
   SQLSATE[VALUE] sqlstate_value  五个字符的字符串错误值
   mysql_error_code   数值类型的错误代码
   condition  表示DECLARE CONDITION 定义的错误条件名称
   SQLWARNING  匹配以01开头的SQLSATTE错误代码
   NOT FOUND  匹配以02 开头的SQLSTATE 错误代码
   SQLEXCEPTION  匹配没有被SQLWARNING ,NOT FOUND捕获的SQLSTATE错误代码

对应上面的六种类型
DECLARE CONTINUE HANDLER FOR SQLSTATE'42S02' SET @info='NO_SUCH_TABLE''

DECLARE CONTINUE HANDLER FOR 1146 SET @info='NO_SUCH_TABLE';

先定义条件，然后调用
DECLARE no_such_table CONDITION FOR 1146;
DECLARE CONDITION HANDLER FOR no_such_table SET @info='NO_SUCH_TABLE';

使用SQL WARNING
DECLARE EXIT HANDLER FOR NOT SQLWARNING SET @info='ERROR';

使用NOT FOUND
DECLARE EXIT HANDLER FOR NOT FOUND SET @info='NO_SUCH_TABLE';

使用SQLEXCEPTION
DECLARE EXIT HANDLER FOR SQLEXCEPTION SET @info='ERROR';

案例：
DELIMITER//
CREATE PROCEDURE handlerdemo()
 BEGIN
 DECLARE CONTINUE HANDLER FOR SQLSTATE '23000' SET @X2=1;
 SET @X=1;
 INSERT INTO test VALUES(1);
  SET @X=2;
 INSERT INTO test VALUES(1);
 SET @X=3;
  END //
 DELIMITER;

CALL handlerdemo();
SELECT @X2;

这个例子，如果不是采用
 DECLARE CONTINUE HANDLER FOR SQLSTATE '23000' SET @X2=1;这一句，第二个INSERT就会因为PRIMARY KEY强制而失败之后，可能已经采取默认路径(EXIT)，并且@x可能已经返回2

-----------------------------------
光标：
当查询语句可能返回多条记录，如果数据量非常大，需要在存储过程和吃吃吃函数中使用光标来逐条查询结果中的记录。应用程序可以根据滚动条或浏览其中的数据。

（1） 声明光标
DECLARE cursor_name CURSOR FOR select_statemeng

例子：
DECLARE cursor_fruit CURSOR FOR SELECT f_name,f_price FROM fruits;

（2） 打开光标
 OPEN cursor_name;

（3）使用光标
 FETCH cursor_name INTO var_name,[,var_name]...{参数名称}

将光标cursor_fruit中SELECT 语句查询出来的信息存入到fruit_name,fruit_price中
FETCH crusor_fruit INTO fruit_name,fruit_price;
(4) 关闭光标
 CLOSE cursor_fruit;

-------------------------
流程控制的使用

（1） IF语句
IF expr_condition THEN statement_list
   [ELSEIF expr_condition THEN statement_list]...
   [ELSE statement_list]
END IF

例子：
IF var IS NULL
  THEN SELECT 'val is NULL';
  ELSE SELECT 'var is not NULL';
END IF;

 如果var 是NULL，则输出val is NULL， 否则输出var is not NULL

（2）CASE语句

第一种格式：
 CASE case_expr
    	WHEN when_value THEN statement_list
 	[WHEN when_value THEN statement_list]...
	[ELSE statement_list]
 END CASE;
例子：
 判断var 值等于1，等于2 或者都不等
 CASE val
   	WHEN 1 THEN SELECT 'val is 1 ';
 	WHEN 2 THEN SELECT 'val is 2';
 	ELSE SELECT 'var is not 1 or 2';
END CASE;

第二种格式：
 CASE
    WHEN expr_condition THEN statement_list
    [WHEN expr_condition THEN statement_list]...
   [ELSE statement_list]
END CASE;

例子：
 判断var是否为空，大于0，小于0，等于0
 CASE 
    WHEN val IS NULL THEN SELECT 'val is NULL';
    WHEN val>0 THEN SELECT 'val is greater than 0';
    WHEN val<0 TEHN SELECT 'val is less than 0';
    ELSE SELECT 'val is 0';
 END CASE;

 (3） LOOP语句
 [loop_label:] LOOP
     statement_list
 END LOOP [loop_label]

使用LEAVE 语句退出循环

例子： id小于等于10之前，一直重复
  DECLARE id INT DEFAULT 0;
 add_loop:LOOP
  SET id=id+1;
     IF id>=10 THEN LEAVE add_loop;
     END IF;
  END LOOP add_loop;

(4)LEAVE语句
 用来退出任何被标注的流程控制构造
 LEAVE 和BEGIN...END 或循环一起被使用

 （5） ITERATE 
      再次循环
  ITERATE label
  ITERATE 只可以出现在LOOP ,PEPEAT 和 WHILE 语句内

 例子；
p<10,重复加1操作，10<p<20,输出‘p id between 10 and 20’,p>20,退出循环

 CREATE PROCEDURE doiterate()
  BEGIN
  DECLARE P INT DEFAULT 0;
  my_loop:LOOP
    SET p=p+1;
    IF p<10 THEN ITERATE my_loop;
    ELSEIF p>20 THEN LEAVE my_loop;
    END IF;
    SELECT 'p id between 10 and 20';
  END LOOP my_loop;
 END;

 (6)REPEAT 语句 先执行在判断
   创建一个待条件判断的循环，如果条件为真，则循环结束，否则重复执行循环语句
 [repeat_label:]REPEAT
    statement_list
  UNTIL expr_condition
  END REPEAT[repeat_label]

例子： id 小于10，一直重复
 DECLARE id INT DEFAULT 0;
 REPEAT
  SET id=id+1;
  UNTIL id>10
  END REPEAT;

（7）WHILE 语句  先判断在执行
 [while_label:] WHILE expr_condition DO
     statement_list
 END WHILE [while_label]
 
 例子：
  DECLARE id INT DEFAULT 0;
  WHILE id<10 DO
  SET id=id+1;
  END WHILE;

  

