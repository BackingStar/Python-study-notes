1、TCP与UDP区别总结：

1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接

2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付

Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。


3、UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。


4.每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信


5、TCP对系统资源要求较多，UDP对系统资源要求较少


TCP 是面向连接的，UDP 是面向无连接的
UDP程序结构较简单
TCP 是面向字节流的，UDP 是基于数据报的
TCP 保证数据正确性，UDP 可能丢包
TCP 保证数据顺序，UDP 不保证


基于 UDP 的几个例子


  直播。直播对实时性的要求比较高，宁可丢包，也不要卡顿的，所以很多直播应用都基于 UDP 实现了自己的视频传输协议


  实时游戏。游戏的特点也是实时性比较高，在这种情况下，采用自定义的可靠的 UDP 协议，自定义重传策略，能够把产生的延迟降到最低，减少网络问题对游戏造成的影响

  物联网。一方面，物联网领域中断资源少，很可能知识个很小的嵌入式系统，而维护 TCP 协议的代价太大了；另一方面，物联网对实时性的要求也特别高。比如 Google 旗下的 Nest 简历 Thread Group，推出了物联网通信协议 Thread，就是基于 UDP 协议的



TCP 为什么是可靠连接


通过？
 TCP 连接传输的数据无差错，不丢失，不重复，且按顺序到达。

 TCP 报文头里面的序号能使 TCP 的数据按序到达

 报文头里面的确认序号能保证不丢包，累计确认及超时重传机制

 TCP 拥有流量控制及拥塞控制的机制 


 TCP 的顺序问题，丢包问题，流量控制都是通过滑动窗口来解决的 
 
拥塞控制时通过拥塞窗口来解决的



TCP编程的服务器端一般步骤是： 
　　
1、创建一个socket，用函数socket()；    
2、设置socket属性，用函数setsockopt();  
　　
3、绑定IP地址、端口等信息到socket上，用函数bind();
4、开启监听，用函数listen()；                 
5、接收客户端上来的连接，用函数accept()；                                    
6、收发数据，用函数send()和recv()，或者read()和write(); 
　　
7、关闭网络连接； 

8、关闭监听；

TCP编程的客户端一般步骤是： 
　　
1、创建一个socket，用函数socket()； 
　　
2、设置socket属性，用函数setsockopt();* 可选 
　　
3、绑定IP地址、端口等信息到socket上，用函数bind();* 可选 
　　
4、设置要连接的对方的IP地址和端口等属性； 
　　
5、连接服务器，用函数connect()； 
　　
6、收发数据，用函数send()和recv()，或者read()和write(); 
　　
7、关闭网络连接；



UDP:
与之对应的UDP编程步骤要简单许多，分别如下：
 
　　
UDP编程的服务器端一般步骤是： 
　　
1、创建一个socket，用函数socket()； 
　　
2、设置socket属性，用函数setsockopt();* 可选 
　　
3、绑定IP地址、端口等信息到socket上，用函数bind(); 
　　
4、循环接收数据，用函数recvfrom(); 
　　
5、关闭网络连接； 



UDP编程的客户端一般步骤是： 
　　
1、创建一个socket，用函数socket()； 
　　
2、设置socket属性，用函数setsockopt();* 可选 
　　
3、绑定IP地址、端口等信息到socket上，用函数bind();* 可选 
　　
4、设置对方的IP地址和端口等属性; 
　　
5、发送数据，用函数sendto(); 
　　
6、关闭网络连接；
--------------------- 
